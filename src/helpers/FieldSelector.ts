type ValidTypes = number | string | boolean | undefined

type ValidValues = 1 | '1' | true

type ArrayElement<A extends unknown[]> = A extends (infer E)[] ? E : never

type FieldList<T> = Partial<
    {
        [K in keyof T]: T[K] extends ValidTypes
            ? ValidValues
            : T[K] extends Array<unknown>
            ? T[K] extends Array<Record<string, unknown>>
                ? FieldList<ArrayElement<T[K]>>
                : ValidValues
            : FieldList<T[K]>
    }
>
export class FieldSelector<T = never> {
    /**
     * String Generated By Fields Passed In Constructor
     */
    public parsedFields: string

    /**
     * @param {FieldList} fields Field names you will use
     * @constructor
     */
    constructor(fields: FieldList<T>) {
        this.parsedFields = this._parseObject(fields)
    }

    private _parseObject = (obj: Record<string, unknown>): string => {
        const finalString: string[] = []
        for (const key in obj) {
            const value = obj[key]
            if (
                (typeof value === 'string' && value === '1') ||
                (typeof value === 'boolean' && value) ||
                (typeof value === 'number' && value === 1)
            ) {
                finalString.push(key)
            } else if (typeof value === 'object' && value) {
                finalString.push(key, '{', this._parseObject(value as Record<string, unknown>), '}')
            }
        }
        return finalString.join(' ')
    }
}
